import pandas as pd
import geopandas as gpd
import streamlit as st
import folium
from shapely.geometry import Point
from sklearn.preprocessing import MinMaxScaler
from streamlit_folium import st_folium
import leafmap as leafmap
import os

st.set_page_config(layout="wide")
st.title("üåç Vulnerability Index Web App")

# Load your CSV with .geo column
uploaded_file = st.file_uploader("Upload CSV with '.geo' column", type="csv")
if uploaded_file:
    df = pd.read_csv(uploaded_file)

    # Extract coordinates from '.geo'
    df['lon'] = df['.geo'].apply(lambda x: eval(x)['coordinates'][0])
    df['lat'] = df['.geo'].apply(lambda x: eval(x)['coordinates'][1])
    geometry = [Point(xy) for xy in zip(df.lon, df.lat)]
    gdf = gpd.GeoDataFrame(df, geometry=geometry, crs="EPSG:4326")

    # Show dataframe preview
    st.subheader("Data Preview")
    st.write(gdf.head())

    # Select index components
    st.sidebar.title("Vulnerability Index Components")
    vars_selected = st.sidebar.multiselect("Select input variables", 
                                           options=[col for col in df.columns if df[col].dtype != 'object'],
                                           default=None)

    if vars_selected and len(vars_selected) > 1:
        # Normalize and compute index
        scaler = MinMaxScaler()
        scaled = scaler.fit_transform(df[vars_selected])
        gdf["vulnerability_index"] = scaled.mean(axis=1)

        # Export CSV
        st.download_button("Download CSV with Vulnerability Index",
                           gdf[["lat", "lon", "vulnerability_index"]].to_csv(index=False),
                           file_name="vulnerability_index.csv")

        # Show map
        st.subheader("üìç Vulnerability Index Map")
        m = folium.Map(location=[gdf.lat.mean(), gdf.lon.mean()], zoom_start=6)
        for _, row in gdf.iterrows():
            folium.CircleMarker(
                location=[row.lat, row.lon],
                radius=5,
                color="red",
                fill=True,
                fill_opacity=0.7,
                popup=f"Index: {row.vulnerability_index:.2f}"
            ).add_to(m)

        st_data = st_folium(m, width=800, height=600)
    else:
        st.warning("Please select at least two numeric variables to build the index.")

# Streamlit app to display raster-based Vulnerability Index

st.set_page_config(layout="wide")

st.title("üó∫Ô∏è Vulnerability Index Map Viewer")

st.markdown("""
This interactive app visualizes a raster-based vulnerability index (e.g., calculated from LST, BUI, population).
You can upload your GeoTIFF raster and view it on the map.
""")

uploaded_file = st.file_uploader("Upload a raster file (.tif)", type=["tif", "tiff"])

if uploaded_file is not None:
    with open("temp.tif", "wb") as f:
        f.write(uploaded_file.read())

    m = leafmap.Map(center=[23.81, 90.42], zoom=9)
    m.add_raster("temp.tif", layer_name="Vulnerability Index", colormap="coolwarm")
    m.to_streamlit(height=600)

    with st.expander("‚ÑπÔ∏è Raster Info"):
        st.markdown("Uploaded: **{}**".format(uploaded_file.name))
else:
    st.warning("Please upload a raster GeoTIFF file to display the vulnerability index.")
